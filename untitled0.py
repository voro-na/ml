# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p4Q927-k4TN9kS4bJNQ_9VU4VmSpCfb6
"""

import numpy as np
import pandas as pd

train = pd.read_csv("TrainData.csv")
test = pd.read_csv("TestData.csv")

train.info()

mean = train['1'].mean()
mean

train['1'].fillna(mean, inplace = True)

train = train.dropna(subset=['13'])

train.head()

train['target'].value_counts()

train['target'] = train['target'].map({'Churn': 1, 'Chorn': 1, 'Not churn': 0, 'Not chorn': 0})

train.nunique()

train[(train['target'] == 0 ) & (train['7'] == 'A')]

mean2 = train['2'].mean()
median13 = train['13'].median()

client = train[(train['2'] > mean2) & (train['13'] < median13)]

len(client[client['target'] == 1]) / len(client)

test['7'] = test['7'].map({'A': 0, 'B': 1})
train['7'] = train['7'].map({'A': 0, 'B': 1})

X = train.drop('target', axis=1)
X = X.drop('traget', axis=1)
y = train['target']

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression

model = LogisticRegression(random_state = 42)

cross_val_score(model, X, y, scoring='f1', cv=3).mean()

from sklearn.model_selection import GridSearchCV

params = {'C' : [0.001, 0.01, 0.1, 1, 10, 100]}

grid = GridSearchCV(LogisticRegression(random_state=42), params, scoring='f1', cv=3)

grid.fit(X, y)

grid.best_params_

train['NEW'] = train['7'] * train['11']
test['NEW'] = test['7'] * test['11']

X = train.drop('target', axis=1)
X = X.drop('traget', axis=1)
y = train['target']


grid = GridSearchCV(LogisticRegression(random_state=42), params, scoring='f1', cv=3)

grid.fit(X, y)

grid.best_score_

!pip install catboost

test.head()

from catboost import CatBoostClassifier

train2 = pd.read_csv("TrainData.csv")

mean = train2['1'].mean()

train2['1'].fillna(mean, inplace = True)

train2 = train2.dropna(subset=['13'])
train2['target'] = train2['target'].map({'Churn': 1, 'Chorn': 1, 'Not churn': 0, 'Not chorn': 0})

X = train2.drop('target', axis=1)
y = train2['target']

model = CatBoostClassifier(cat_features=[7])
model.fit(X, y)

pred = model.predict(test)
pred

test['target'] = pred

test[['target']].to_csv("result.csv", index=False)